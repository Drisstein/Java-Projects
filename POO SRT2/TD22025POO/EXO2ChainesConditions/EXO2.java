/*
 * Exercice  3: Utiliser les cha√Ænes et conditions Un utilisateur doit d√©finir un mot de passe s√©curis√©. 
 * Le programme v√©rifie que le mot de passe : 
ÔÇ∑ Contient au moins 8 caract√®res 
ÔÇ∑ Contient au moins une lettre majuscule 
ÔÇ∑ Contient au moins un chiffre  1. 

Cr√©er  une  classe  Utilisateur  qui  a  deux  attributs  priv√©s  login  et  mot  de  passe  mdp.  
Cr√©er  les Getter/Setter des attributs. 
Ajouter une m√©thode afficher() qui affiche les infos d‚Äôun utilisateur. 
2. Cr√©er  une  autre  classe  repr√©sentant  le  programme  principal.  En  plus  de  la  m√©thode  main,  elle 
contient deux aures m√©thodes static: 
ÔÇß checkPassword(String mdp) : qui v√©rifie si le mot de passe est valide ou non. 
ÔÇß createUser(String login, String mdp) : qui cr√©e et affiche un utilisateur. 

üëâ Utilisez les m√©thodes :  
ÔÇ∑ length() : retourne la longueur de la cha√Æne. 
ÔÇ∑ toCharArray() : transforme une cha√Æne en tableau de caract√®res. 
ÔÇ∑ Character.isUpperCase(char) : v√©rifie si le caract√®re est une majuscule. 
ÔÇ∑ Character.isDigit(char) : v√©rifie si c‚Äôest un chiffre. 
  

 */

import java.util.Scanner;

public class EXO2 {

    // Cr√©er une classe Utilisateur qui a deux attributs priv√©s login et mot de
    // passe mdp.
    // Cr√©er les Getter/Setter des attributs.
    static class Utilisateur {
        private String login;
        private String mdp;

        public Utilisateur(String login, String mdp) {
            this.login = login;
            this.mdp = mdp;
        }

        public String getLogin() {
            return login;
        }

        public void setLogin(String login) {
            this.login = login;
        }

        public String getMdp() {
            return mdp;
        }

        public void setMdp(String mdp) {
            this.mdp = mdp;
        }

        // Ajouter une m√©thode afficher() qui affiche les infos d‚Äôun utilisateur.
        public void afficher() {
            System.out.println("Utilisateur: " + login + ", Mot de passe: " + mdp);
        }
    }
    // ÔÇß checkPassword(String mdp) : qui v√©rifie si le mot de passe est valide ou
    // non.

    static boolean checkPassword(String mdp) {
        if (mdp.length() < 8) {
            return false; // Moins de 8 caract√®res
        }

        for (char c : mdp.toCharArray()) {
            if (Character.isUpperCase(c)) {
                return true;
            }
            if (Character.isDigit(c)) {
                return true;
            }
        }
        return true; // Doit contenir au moins une majuscule et un chiffre

    }

    // ÔÇß createUser(String login, String mdp) : qui cr√©e et affiche un utilisateur.
    static Utilisateur createUser(String login, String mdp) {
        if (checkPassword(mdp)) {
            Utilisateur user = new Utilisateur(login, mdp); // Cr√©er un nouvel utilisateur
            user.afficher();
            return user;
        } else {
            System.out.println(
                    "Erreur ,Le mot de passe doit contenir au moins 8 caract√®res, une lettre majuscule et un chiffre.");
            return null;
        }
    }

    public static void main(String[] args) {
        System.out.println("Hello World !");
        // 2. Cr√©er une autre classe repr√©sentant le programme principal. En plus de la
        // m√©thode main, elle
        // contient deux aures m√©thodes static:
        Scanner lire = new Scanner(System.in);
        System.out.print("Entrez le login de l'utilisateur :");
        String login = lire.nextLine();
        System.out.print("Entrez le mot de passe  :");
        String mdp = lire.nextLine();
        Utilisateur user = createUser(login, mdp);
        if (user != null) {
            System.out.println("Utilisateur cr√©√© avec succ√®s.");
        } else {
            System.out.println("√âchec de la cr√©ation de l'utilisateur.");
        }
        lire.close();
    }
}